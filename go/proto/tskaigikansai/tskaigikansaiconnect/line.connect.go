// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tskaigikansai/line.proto

package tskaigikansaiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	tskaigikansai "github.com/izumin5210-sandbox/custom-jsx-runtimes/go/proto/tskaigikansai"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LineServiceName is the fully-qualified name of the LineService service.
	LineServiceName = "tskaigikansai.LineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LineServiceSendHelloMessageProcedure is the fully-qualified name of the LineService's
	// SendHelloMessage RPC.
	LineServiceSendHelloMessageProcedure = "/tskaigikansai.LineService/SendHelloMessage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	lineServiceServiceDescriptor                = tskaigikansai.File_tskaigikansai_line_proto.Services().ByName("LineService")
	lineServiceSendHelloMessageMethodDescriptor = lineServiceServiceDescriptor.Methods().ByName("SendHelloMessage")
)

// LineServiceClient is a client for the tskaigikansai.LineService service.
type LineServiceClient interface {
	SendHelloMessage(context.Context, *connect.Request[tskaigikansai.SendHelloMessageRequest]) (*connect.Response[tskaigikansai.SendHelloMessageResponse], error)
}

// NewLineServiceClient constructs a client for the tskaigikansai.LineService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &lineServiceClient{
		sendHelloMessage: connect.NewClient[tskaigikansai.SendHelloMessageRequest, tskaigikansai.SendHelloMessageResponse](
			httpClient,
			baseURL+LineServiceSendHelloMessageProcedure,
			connect.WithSchema(lineServiceSendHelloMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// lineServiceClient implements LineServiceClient.
type lineServiceClient struct {
	sendHelloMessage *connect.Client[tskaigikansai.SendHelloMessageRequest, tskaigikansai.SendHelloMessageResponse]
}

// SendHelloMessage calls tskaigikansai.LineService.SendHelloMessage.
func (c *lineServiceClient) SendHelloMessage(ctx context.Context, req *connect.Request[tskaigikansai.SendHelloMessageRequest]) (*connect.Response[tskaigikansai.SendHelloMessageResponse], error) {
	return c.sendHelloMessage.CallUnary(ctx, req)
}

// LineServiceHandler is an implementation of the tskaigikansai.LineService service.
type LineServiceHandler interface {
	SendHelloMessage(context.Context, *connect.Request[tskaigikansai.SendHelloMessageRequest]) (*connect.Response[tskaigikansai.SendHelloMessageResponse], error)
}

// NewLineServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLineServiceHandler(svc LineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	lineServiceSendHelloMessageHandler := connect.NewUnaryHandler(
		LineServiceSendHelloMessageProcedure,
		svc.SendHelloMessage,
		connect.WithSchema(lineServiceSendHelloMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/tskaigikansai.LineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LineServiceSendHelloMessageProcedure:
			lineServiceSendHelloMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLineServiceHandler struct{}

func (UnimplementedLineServiceHandler) SendHelloMessage(context.Context, *connect.Request[tskaigikansai.SendHelloMessageRequest]) (*connect.Response[tskaigikansai.SendHelloMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tskaigikansai.LineService.SendHelloMessage is not implemented"))
}
